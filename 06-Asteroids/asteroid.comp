#extension GL_GOOGLE_include_directive : enable
#include "asteroid_common.glsl"
#include "shared.h"

struct IndirectCommand{
    uint indexCount;
    uint instanceCount;
    uint indexStart;
    uint baseVertex;
    uint baseInstance;
};

layout(std430, binding = 2) buffer asteroidsIndirectBuffer
{
    IndirectCommand indirectBuffer[];
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main(){
    const uint index = gl_GlobalInvocationID.x;
    if (index >= nAsteroids){
        return;
    }

    vec3 pos = genAsteroidInitialPosition(index);

    IndirectCommand i;
    i.baseVertex = 0;
    i.baseInstance = index;
    i.instanceCount = 1;

    // decide which LOD to use based on the depth
    vec4 asteroidCenter = ubo.viewProj * vec4(pos,1);
    float depth = asteroidCenter.z / asteroidCenter.w;
    
    if (depth < 0.99){
        // highest detail LOD
        i.indexCount = ubo.asteroidLod1StartIndex;
        i.indexStart = 0;
    }
    else if (depth > 0.998){
        // lowest detail LOD
        i.indexCount = ubo.asteroidTotalIndices - ubo.asteroidLod2StartIndex;
        i.indexStart = ubo.asteroidLod2StartIndex;
        
    }
    else{
        // midrange detail LOD
        i.indexCount = ubo.asteroidLod2StartIndex - ubo.asteroidLod1StartIndex;
        i.indexStart = ubo.asteroidLod1StartIndex;
    }

    indirectBuffer[index] = i;
}
